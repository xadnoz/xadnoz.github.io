(window.webpackJsonp=window.webpackJsonp||[]).push([[1074],{1290:function(e,t,r){"use strict";r.r(t);var n=r(42),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"security-policy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#security-policy"}},[e._v("#")]),e._v(" Security Policy")]),e._v(" "),r("h2",{attrs:{id:"no-guarantees"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#no-guarantees"}},[e._v("#")]),e._v(" No guarantees")]),e._v(" "),r("p",[e._v("Support is provided on a best-effort bases only.\nNo binding guarantees can be provided.")]),e._v(" "),r("h2",{attrs:{id:"security-premises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#security-premises"}},[e._v("#")]),e._v(" Security premises")]),e._v(" "),r("p",[e._v("Rand provides the trait "),r("code",[e._v("rand_core::CryptoRng")]),e._v(" aka "),r("code",[e._v("rand::CryptoRng")]),e._v(" as a marker\ntrait. Generators implementating "),r("code",[e._v("RngCore")]),e._v(" "),r("em",[e._v("and")]),e._v(" "),r("code",[e._v("CryptoRng")]),e._v(", and given the\nadditional constraints that:")]),e._v(" "),r("ul",[r("li",[e._v("Instances of seedable RNGs (those implementing "),r("code",[e._v("SeedableRng")]),e._v(") are\nconstructed with cryptographically secure seed values")]),e._v(" "),r("li",[e._v("The state (memory) of the RNG and its seed value are not be exposed")])]),e._v(" "),r("p",[e._v("are expected to provide the following:")]),e._v(" "),r("ul",[r("li",[e._v("An attacker can gain no advantage over chance (50% for each bit) in\npredicting the RNG output, even with full knowledge of all prior outputs.")])]),e._v(" "),r("p",[e._v("For some RNGs, notably "),r("code",[e._v("OsRng")]),e._v(", "),r("code",[e._v("ThreadRng")]),e._v(" and those wrapped by "),r("code",[e._v("ReseedingRng")]),e._v(",\nwe provide limited mitigations against side-channel attacks:")]),e._v(" "),r("ul",[r("li",[e._v("After a process fork on Unix, there is an upper-bound on the number of bits\noutput by the RNG before the processes diverge, after which outputs from\neach process's RNG are uncorrelated")]),e._v(" "),r("li",[e._v("After the state (memory) of an RNG is leaked, there is an upper-bound on the\nnumber of bits of output by the RNG before prediction of output by an\nobserver again becomes computationally-infeasible")])]),e._v(" "),r("p",[e._v("Additionally, derivations from such an RNG (including the "),r("code",[e._v("Rng")]),e._v(" trait,\nimplementations of the "),r("code",[e._v("Distribution")]),e._v(" trait, and "),r("code",[e._v("seq")]),e._v(" algorithms) should not\nintroduce significant bias other than that expected from the operation in\nquestion (e.g. bias from a weighted distribution).")]),e._v(" "),r("h2",{attrs:{id:"supported-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#supported-versions"}},[e._v("#")]),e._v(" Supported Versions")]),e._v(" "),r("p",[e._v("We will attempt to uphold these premises in the following crate versions,\nprovided that only the latest patch version is used, and with potential\nexceptions for theoretical issues without a known exploit:")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Crate")]),e._v(" "),r("th",[e._v("Versions")]),e._v(" "),r("th",[e._v("Exceptions")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[r("code",[e._v("rand")])]),e._v(" "),r("td",[e._v("0.7")]),e._v(" "),r("td")]),e._v(" "),r("tr",[r("td",[r("code",[e._v("rand")])]),e._v(" "),r("td",[e._v("0.5, 0.6")]),e._v(" "),r("td",[e._v("Jitter")])]),e._v(" "),r("tr",[r("td",[r("code",[e._v("rand")])]),e._v(" "),r("td",[e._v("0.4")]),e._v(" "),r("td",[e._v("Jitter, ISAAC")])]),e._v(" "),r("tr",[r("td",[r("code",[e._v("rand_core")])]),e._v(" "),r("td",[e._v("0.2 - 0.5")]),e._v(" "),r("td")]),e._v(" "),r("tr",[r("td",[r("code",[e._v("rand_chacha")])]),e._v(" "),r("td",[e._v("0.1 - 0.2")]),e._v(" "),r("td")]),e._v(" "),r("tr",[r("td",[r("code",[e._v("rand_hc")])]),e._v(" "),r("td",[e._v("0.1 - 0.2")]),e._v(" "),r("td")])])]),e._v(" "),r("p",[e._v("Explanation of exceptions:")]),e._v(" "),r("ul",[r("li",[e._v("Jitter: "),r("code",[e._v("JitterRng")]),e._v(" is used as an entropy source when the primary source\nfails; this source may not be secure against side-channel attacks, see #699.")]),e._v(" "),r("li",[e._v("ISAAC: the "),r("a",{attrs:{href:"https://burtleburtle.net/bob/rand/isaacafa.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ISAAC"),r("OutboundLink")],1),e._v(" RNG used\nto implement "),r("code",[e._v("thread_rng")]),e._v(" is difficult to analyse and thus cannot provide\nstrong assertions of security.")])]),e._v(" "),r("h2",{attrs:{id:"known-issues"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#known-issues"}},[e._v("#")]),e._v(" Known issues")]),e._v(" "),r("p",[e._v("In "),r("code",[e._v("rand")]),e._v(" version 0.3 (0.3.18 and later), if "),r("code",[e._v("OsRng")]),e._v(" fails, "),r("code",[e._v("thread_rng")]),e._v(" is\nseeded from the system time in an insecure manner.")]),e._v(" "),r("h2",{attrs:{id:"reporting-a-vulnerability"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reporting-a-vulnerability"}},[e._v("#")]),e._v(" Reporting a Vulnerability")]),e._v(" "),r("p",[e._v("To report a vulnerability, "),r("a",{attrs:{href:"https://github.com/rust-random/rand/issues/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("open a new issue"),r("OutboundLink")],1),e._v(".\nOnce the issue is resolved, the vulnerability should be "),r("a",{attrs:{href:"https://github.com/RustSec/advisory-db/blob/master/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("reported to RustSec"),r("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=a.exports}}]);