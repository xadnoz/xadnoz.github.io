(window.webpackJsonp=window.webpackJsonp||[]).push([[1078],{1287:function(e,r,t){"use strict";t.r(r);var a=t(42),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"rand-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rand-core"}},[e._v("#")]),e._v(" rand_core")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://travis-ci.org/rust-random/rand",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://travis-ci.org/rust-random/rand.svg",alt:"Build Status"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://ci.appveyor.com/project/rust-random/rand",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://ci.appveyor.com/api/projects/status/github/rust-random/rand?svg=true",alt:"Build Status"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://crates.io/crates/rand_core",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img.shields.io/crates/v/rand_core.svg",alt:"Latest version"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://rust-random.github.io/book/",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img.shields.io/badge/book-master-yellow.svg",alt:"Book"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://rust-random.github.io/rand/rand_core",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img.shields.io/badge/api-master-yellow.svg",alt:"API"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://docs.rs/rand_core",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://docs.rs/rand_core/badge.svg",alt:"API"}}),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://github.com/rust-random/rand#rust-version-requirements",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img.shields.io/badge/rustc-1.32+-lightgray.svg",alt:"Minimum rustc version"}}),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Core traits and error types of the "),t("a",{attrs:{href:"https://crates.io/crates/rand",target:"_blank",rel:"noopener noreferrer"}},[e._v("rand"),t("OutboundLink")],1),e._v(" library, plus tools for implementing\nRNGs.")]),e._v(" "),t("p",[e._v("This crate is intended for use when implementing the core trait, "),t("code",[e._v("RngCore")]),e._v("; it\ndefines the core traits to be implemented as well as several small functions to\naid in their implementation and types required for error handling.")]),e._v(" "),t("p",[e._v("The main "),t("a",{attrs:{href:"https://crates.io/crates/rand",target:"_blank",rel:"noopener noreferrer"}},[e._v("rand"),t("OutboundLink")],1),e._v(" crate re-exports most items defined in this crate, along with\ntools to convert the integer samples generated by "),t("code",[e._v("RngCore")]),e._v(" to many different\napplications (including sampling from restricted ranges, conversion to floating\npoint, list permutations and secure initialisation of RNGs). Most users should\nprefer to use the main "),t("a",{attrs:{href:"https://crates.io/crates/rand",target:"_blank",rel:"noopener noreferrer"}},[e._v("rand"),t("OutboundLink")],1),e._v(" crate.")]),e._v(" "),t("p",[e._v("Links:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://rust-random.github.io/rand/rand_core",target:"_blank",rel:"noopener noreferrer"}},[e._v("API documentation (master)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.rs/rand_core",target:"_blank",rel:"noopener noreferrer"}},[e._v("API documentation (docs.rs)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Changelog"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"functionality"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionality"}},[e._v("#")]),e._v(" Functionality")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("rand_core")]),e._v(" crate provides:")]),e._v(" "),t("ul",[t("li",[e._v("base random number generator traits")]),e._v(" "),t("li",[e._v("error-reporting types")]),e._v(" "),t("li",[e._v("functionality to aid implementation of RNGs")])]),e._v(" "),t("p",[e._v("The traits and error types are also available via "),t("code",[e._v("rand")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"versions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#versions"}},[e._v("#")]),e._v(" Versions")]),e._v(" "),t("p",[e._v("The current version is:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('rand_core = "0.5.0"\n')])])]),t("p",[e._v("Rand libs have inter-dependencies and make use of the\n"),t("a",{attrs:{href:"https://github.com/dtolnay/semver-trick/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semver trick"),t("OutboundLink")],1),e._v(" in order to make traits\ncompatible across crate versions. (This is especially important for "),t("code",[e._v("RngCore")]),e._v("\nand "),t("code",[e._v("SeedableRng")]),e._v(".) A few crate releases are thus compatibility shims,\ndepending on the "),t("em",[e._v("next")]),e._v(" lib version (e.g. "),t("code",[e._v("rand_core")]),e._v(" versions "),t("code",[e._v("0.2.2")]),e._v(" and\n"),t("code",[e._v("0.3.1")]),e._v("). This means, for example, that "),t("code",[e._v("rand_core_0_4_0::SeedableRng")]),e._v(" and\n"),t("code",[e._v("rand_core_0_3_0::SeedableRng")]),e._v(" are distinct, incompatible traits, which can\ncause build errors. Usually, running "),t("code",[e._v("cargo update")]),e._v(" is enough to fix any issues.")]),e._v(" "),t("h2",{attrs:{id:"crate-features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#crate-features"}},[e._v("#")]),e._v(" Crate Features")]),e._v(" "),t("p",[t("code",[e._v("rand_core")]),e._v(" supports "),t("code",[e._v("no_std")]),e._v(" and "),t("code",[e._v("alloc")]),e._v("-only configurations, as well as full\n"),t("code",[e._v("std")]),e._v(" functionality. The differences between "),t("code",[e._v("no_std")]),e._v(" and full "),t("code",[e._v("std")]),e._v(" are small,\ncomprising "),t("code",[e._v("RngCore")]),e._v(" support for "),t("code",[e._v("Box<R>")]),e._v(" types where "),t("code",[e._v("R: RngCore")]),e._v(",\n"),t("code",[e._v("std::io::Read")]),e._v(" support for types supporting "),t("code",[e._v("RngCore")]),e._v(", and\nextensions to the "),t("code",[e._v("Error")]),e._v(" type's functionality.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("std")]),e._v(" feature is "),t("em",[e._v("not enabled by default")]),e._v(". This is primarily to avoid build\nproblems where one crate implicitly requires "),t("code",[e._v("rand_core")]),e._v(" with "),t("code",[e._v("std")]),e._v(" support and\nanother crate requires "),t("code",[e._v("rand")]),e._v(" "),t("em",[e._v("without")]),e._v(" "),t("code",[e._v("std")]),e._v(" support. However, the "),t("code",[e._v("rand")]),e._v(" crate\ncontinues to enable "),t("code",[e._v("std")]),e._v(" support by default, both for itself and "),t("code",[e._v("rand_core")]),e._v(".")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("serde1")]),e._v(" feature can be used to derive "),t("code",[e._v("Serialize")]),e._v(" and "),t("code",[e._v("Deserialize")]),e._v(" for RNG\nimplementations that use the "),t("code",[e._v("BlockRng")]),e._v(" or "),t("code",[e._v("BlockRng64")]),e._v(" wrappers.")]),e._v(" "),t("h1",{attrs:{id:"license"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[e._v("#")]),e._v(" License")]),e._v(" "),t("p",[t("code",[e._v("rand_core")]),e._v(" is distributed under the terms of both the MIT license and the\nApache License (Version 2.0).")]),e._v(" "),t("p",[e._v("See "),t("a",{attrs:{href:"LICENSE-APACHE"}},[e._v("LICENSE-APACHE")]),e._v(" and "),t("a",{attrs:{href:"LICENSE-MIT"}},[e._v("LICENSE-MIT")]),e._v(", and\n"),t("a",{attrs:{href:"COPYRIGHT"}},[e._v("COPYRIGHT")]),e._v(" for details.")])])}),[],!1,null,null,null);r.default=n.exports}}]);