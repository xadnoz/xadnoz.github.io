(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{359:function(e,t,n){"use strict";n.r(t);var o=n(42),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("##Introduction")]),e._v(" "),n("p",[e._v("The btcd-cli4j library is a simple Java wrapper around Bitcoin Core's JSON-RPC (via HTTP) interface.")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Latest release:")]),e._v(" 0.5.1 ("),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/archive/0.5.1.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v(".zip"),n("OutboundLink")],1),e._v("; "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/archive/0.5.1.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[e._v(".tar.gz"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[n("strong",[e._v("Compatibility:")]),e._v(" Bitcoin Core v0.10.0/0.10.1/0.10.2/0.10.3 (see "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" for older versions)")]),e._v(" "),n("li",[n("strong",[e._v("API coverage:")]),e._v(" 78 of 80 commands (fully) implemented")]),e._v(" "),n("li",[n("strong",[e._v("License:")]),e._v(" Apache License 2.0 (see "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/blob/master/LICENSE.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("LICENSE.md"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[n("strong",[e._v("Readme updated:")]),e._v(" 2016-02-17 10:16:43 (UTC)")])]),e._v(" "),n("p",[e._v("A list of all "),n("em",[e._v("bitcoind")]),e._v(" JSON-RPC API commands currently supported by btcd-cli4j can be found in the "),n("code",[e._v("Commands")]),e._v(" enum (see "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/blob/master/core/src/main/java/com/neemre/btcdcli4j/core/Commands.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" for more details).")]),e._v(" "),n("p",[e._v("btcd-cli4j follows a layered architecture in that the actions needed to communicate with the Bitcoin network have been separated into multiple levels of abstraction. The central interface used to invoke "),n("em",[e._v("bitcoind")]),e._v(" API commands ("),n("code",[e._v("BtcdClient")]),e._v(") is solely concerned with Bitcoin-specific entity mapping & business logic and does not know anything about JSON-RPC or HTTP. Internally, "),n("code",[e._v("BtcdClientImpl")]),e._v(" relies on "),n("code",[e._v("JsonRpcClient")]),e._v(" for managing cross-application communication and adherence to the JSON-RPC standard. "),n("code",[e._v("JsonRpcClientImpl")]),e._v(", in turn, utilizes the interface provided by "),n("code",[e._v("SimpleHttpClient")]),e._v(" to tunnel all JSON-RPC traffic over HTTP. Both the "),n("code",[e._v("JsonRpcClientImpl")]),e._v(" and "),n("code",[e._v("SimpleHttpClientImpl")]),e._v(" classes rely on external service providers internally ("),n("em",[e._v("Jackson JSON Processor")]),e._v(" and "),n("em",[e._v("Apache HttpComponents Client")]),e._v(" for the time being) which should be relatively easy to replace, were the need to arise.")]),e._v(" "),n("p",[e._v("By default, all incoming & outgoing decimal values ("),n("em",[e._v("i.e.")]),e._v(" amounts, balances, ping times etc) are transformed into "),n("code",[e._v("BigDecimal")]),e._v("s with a scale of 8 and rounding mode of "),n("code",[e._v("RoundingMode.HALF_UP")]),e._v(" by btcd-cli4j.")]),e._v(" "),n("p",[e._v("##Technologies & dependencies")]),e._v(" "),n("p",[e._v("The btcd-cli4j library has been designed for use with Java 7+, however it should also work fine with slightly older versions of the Java runtime ("),n("em",[e._v("i.e.")]),e._v(" Java 6).")]),e._v(" "),n("p",[e._v("Core dependencies:")]),e._v(" "),n("ul",[n("li",[e._v("Apache HttpComponents Client 4.3.6 "),n("a",{attrs:{href:"https://hc.apache.org/httpcomponents-client-ga/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Jackson JSON Processor 2.5.0:\n"),n("ul",[n("li",[e._v("Streaming 2.5.0 ("),n("code",[e._v("jackson-core")]),e._v(") "),n("a",{attrs:{href:"https://github.com/FasterXML/jackson-core",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Annotations 2.5.0 ("),n("code",[e._v("jackson-annotations")]),e._v(") "),n("a",{attrs:{href:"https://github.com/FasterXML/jackson-annotations",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Databind 2.5.0 ("),n("code",[e._v("jackson-databind")]),e._v(") "),n("a",{attrs:{href:"https://github.com/FasterXML/jackson-databind",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)])])]),e._v(" "),n("li",[e._v("Lombok 1.16.2 "),n("a",{attrs:{href:"https://github.com/rzwitserloot/lombok",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("Other dependencies:")]),e._v(" "),n("ul",[n("li",[e._v("Simple Logging Facade for Java 1.7.10 "),n("a",{attrs:{href:"http://www.slf4j.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Apache Commons Lang 3.3.2 "),n("a",{attrs:{href:"http://commons.apache.org/proper/commons-lang/",target:"_blank",rel:"noopener noreferrer"}},[e._v("[link]"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("##Getting started "),n("a",{attrs:{name:"getting-started"}})]),e._v(" "),n("p",[e._v("Since the project is currently not hosted on the Maven Central Repository, you should begin by specifying the following custom repository in your "),n("code",[e._v("pom.xml")]),e._v(" file:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<repositories>\n\t<repository>\n\t\t<id>mvn-nemp-ftp</id>\n\t\t<name>Nemp's Maven Repository</name>\n\t\t<url>http://mvn.neemre.com/</url>\n\t</repository>\n</repositories>\n")])])]),n("p",[e._v("Next, modify your "),n("code",[e._v("pom.xml")]),e._v(" to include "),n("code",[e._v("btcd-cli4j-core")]),e._v(" as a dependency:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<dependency>\n\t<groupId>com.neemre.btcd-cli4j</groupId>\n\t<artifactId>btcd-cli4j-core</artifactId>\n\t<version>0.5.1</version>\n</dependency>\n")])])]),n("p",[e._v("In order to communicate with "),n("em",[e._v("bitcoind")]),e._v(", btcd-cli4j needs to be aware of your node's exact configuration. The easiest way of providing this information is via a "),n("code",[e._v("node_config.properties")]),e._v(" file, for example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("node.bitcoind.rpc.protocol = http\nnode.bitcoind.rpc.host = 127.0.0.1\nnode.bitcoind.rpc.port = 8332\nnode.bitcoind.rpc.user = falcon-pc\nnode.bitcoind.rpc.password = 3F4DN9QGqWrB4DCdfYMXp8xdDYL4HDFzpaS9r76DbNhw\nnode.bitcoind.http.auth_scheme = Basic\n")])])]),n("p",[e._v("Finally, to begin using the wrapper, create an instance of "),n("code",[e._v("CloseableHttpClient")]),e._v(" (the default HTTP provider), load up the properties file created in the previous step and pass the two into a new "),n("code",[e._v("BtcdClientImpl")]),e._v(" instance:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\nCloseableHttpClient httpProvider = HttpClients.custom().setConnectionManager(cm)\n\t\t.build();\nProperties nodeConfig = new Properties();\nInputStream is = new BufferedInputStream(new FileInputStream("node_config.properties"));\nnodeConfig.load(is);\nis.close();\n\nBtcdClient client = new BtcdClientImpl(httpProvider, nodeConfig);\n')])])]),n("p",[e._v("That's it!")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("MiningInfo miningInfo = client.getMiningInfo();\n")])])]),n("p",[n("em",[e._v("P.S. To learn more about the default HTTP provider (e.g. performance tuning of")]),e._v(" "),n("code",[e._v("CloseableHttpClient")]),e._v(" "),n("em",[e._v("instances and/or use of SSL/TLS layering (i.e. HTTPS) (untested!)), see the official HttpComponents Client documentation")]),e._v(" "),n("a",{attrs:{href:"http://hc.apache.org/httpcomponents-client-4.3.x/tutorial/html/connmgmt.html#d5e380",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" "),n("em",[e._v("and")]),e._v(" "),n("a",{attrs:{href:"http://hc.apache.org/httpcomponents-client-4.3.x/tutorial/html/connmgmt.html#d5e436",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),n("em",[e._v(". Additionally, check out the related code samples:")]),e._v(" "),n("a",{attrs:{href:"http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/examples/org/apache/http/examples/client/ClientConfiguration.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("1"),n("OutboundLink")],1),e._v(" "),n("em",[e._v("and")]),e._v(" "),n("a",{attrs:{href:"http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("2"),n("OutboundLink")],1),n("em",[e._v(".")])]),e._v(" "),n("p",[e._v("##Handling asynchronous events")]),e._v(" "),n("p",[e._v("Bitcoin Core also provides an asynchronous notification API by relying on a set of user-defined shell scripts specified in the "),n("code",[e._v("bitcoin.conf")]),e._v(" configuration file (see "),n("a",{attrs:{href:"https://en.bitcoin.it/wiki/Running_Bitcoin#Bitcoin.conf_Configuration_File",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(" for more details). Whenever a particular event is detected on the network, the appropriate shell script gets loaded with data & executed by "),n("em",[e._v("bitcoind")]),e._v(". To take advantage of this feature, add the following lines to your "),n("code",[e._v("bitcoin.conf")]),e._v(" file (use any flavor of "),n("code",[e._v("netcat")]),e._v(" you're comfortable with, such as "),n("code",[e._v("ncat")]),e._v(" or "),n("code",[e._v("socat")]),e._v("):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('alertnotify="echo %s | ncat 127.0.0.1 5158"\nblocknotify="echo %s | ncat 127.0.0.1 5159"\nwalletnotify="echo %s | ncat 127.0.0.1 5160"\n')])])]),n("p",[e._v("Next, modify your "),n("code",[e._v("pom.xml")]),e._v(" to include "),n("code",[e._v("btcd-cli4j-daemon")]),e._v(" as a dependency:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("<dependency>\n\t<groupId>com.neemre.btcd-cli4j</groupId>\n\t<artifactId>btcd-cli4j-daemon</artifactId>\n\t<version>0.5.1</version>\n</dependency>\n")])])]),n("p",[e._v("To let the daemon know where to listen for notifications, open up your "),n("code",[e._v("node_config.properties")]),e._v(" file and specify the ports listed in the shell scripts above, for example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("node.bitcoind.notification.alert.port = 5158\nnode.bitcoind.notification.block.port = 5159\nnode.bitcoind.notification.wallet.port = 5160\n")])])]),n("p",[e._v("Finally, instantiate the daemon with a preconfigured "),n("code",[e._v("BtcdClient")]),e._v(" instance (see "),n("a",{attrs:{href:"#getting-started"}},[e._v("Getting started")]),e._v(") like so:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("BtcdDaemon daemon = new BtcdDaemonImpl(client);\n")])])]),n("p",[e._v("Alternatively, create a self-contained version of the daemon ("),n("em",[e._v("i.e.")]),e._v(" by specifying the affected ports only):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("BtcdDaemon daemon = new BtcdDaemonImpl(5158, 5159, 5160);\n")])])]),n("p",[e._v("Great! Now you're ready to add some event listeners:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("daemon.addBlockListener(new BlockListener() {\n\t@Override\n\tpublic void blockDetected(Block block) {\n\t\tSystem.out.printf(\"New block detected! (Event details: '%s')\\n\", block);\n\t}\n});\n")])])]),n("p",[e._v("##Examples")]),e._v(" "),n("p",[e._v("For a short list of usage examples (mostly just sample API calls), see the "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/tree/master/examples/src/main",target:"_blank",rel:"noopener noreferrer"}},[e._v("examples"),n("OutboundLink")],1),e._v(" module.")]),e._v(" "),n("p",[e._v("Please note that some of the examples above will only work on the Bitcoin TESTNET3 chain (for obvious reasons).")]),e._v(" "),n("p",[e._v("##Supporting the project")]),e._v(" "),n("p",[e._v("If btcd-cli4j has been useful to you and you feel like contributing, consider posting a "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("bug report"),n("OutboundLink")],1),e._v(" or a "),n("a",{attrs:{href:"https://github.com/priiduneemre/btcd-cli4j/pulls",target:"_blank",rel:"noopener noreferrer"}},[e._v("pull request"),n("OutboundLink")],1),e._v(". Alternatively, a spare beer or pizza would also be much appreciated:")]),e._v(" "),n("ul",[n("li",[e._v("Bitcoin: "),n("code",[e._v("12CfEQ7RAEwpS82jFZg1HgjeH8obbpMeL5")])]),e._v(" "),n("li",[e._v("Litecoin: "),n("code",[e._v("LMwTYNgj7Hkugd1x8rjNXBYdYKgNvACjRF")])]),e._v(" "),n("li",[e._v("Dogecoin: "),n("code",[e._v("D6DUTo8MTxredfHbbQsb7MLqu7zkuFSMnt")])])]),e._v(" "),n("p",[e._v("If you have any further questions, feel free to visit us at the "),n("code",[e._v("#bitcoin")]),e._v(" IRC channel on "),n("a",{attrs:{href:"https://freenode.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("freenode"),n("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);