(window.webpackJsonp=window.webpackJsonp||[]).push([[782],{1204:function(e,t,a){"use strict";a.r(t);var o=a(42),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("The guide has been updated to work with the Alexander testnet.")]),e._v(" "),a("h2",{attrs:{id:"how-to-view-parachains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-view-parachains"}},[e._v("#")]),e._v(" How to view parachains")]),e._v(" "),a("p",[e._v("On the "),a("a",{attrs:{href:"https://polkadot.js.org/apps/#/explorer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Polkadot UI"),a("OutboundLink")],1),e._v(" navigate to the "),a("code",[e._v("Chain State")]),e._v(" tab. Select the "),a("code",[e._v("parachains")]),e._v(" module and the "),a("code",[e._v("parachains()")]),e._v(" then hit the "),a("code",[e._v("+")]),e._v(" button. It will return an array of the currently active parachains.")]),e._v(" "),a("h2",{attrs:{id:"how-to-deploy-the-adder-parachain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-deploy-the-adder-parachain"}},[e._v("#")]),e._v(" How to deploy the Adder parachain")]),e._v(" "),a("p",[a("strong",[e._v("You will need to have the minimum deposit needed to create a referendum. Currently this minimum is 5 DOTs.")])]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("adder")]),e._v(" parachain is a simple parachain which will keep a value in storage and add to this value as messages are sent to it. It can be found in the Polkadot repository under the "),a("code",[e._v("test-parachains")]),e._v(" folder.")]),e._v(" "),a("blockquote",[a("p",[e._v("A slightly out-of-date video version of this guide presented by Adrian Brink is available "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=pDqkzvA4C0E",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(". When the two guides diverge, please refer to this written text as definitive and updated.")])]),e._v(" "),a("h3",{attrs:{id:"building-the-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#building-the-code"}},[e._v("#")]),e._v(" Building the code")]),e._v(" "),a("p",[e._v("The first step is to download locally the Polkadot code and switch to the "),a("code",[e._v("v0.4")]),e._v(" branch.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/paritytech/polkadot.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" polkadot\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout v0.4\n")])])]),a("p",[e._v("Now make sure you have Rust installed.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://sh.rustup.rs -sSf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" clang pkg-config libssl-dev\nrustup update\n")])])]),a("p",[e._v("Now navigate to the "),a("code",[e._v("test-parachains")]),e._v(" folder in the Polkadot code repository and run the build script.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" test-parachains\n./build.sh\n")])])]),a("p",[e._v("This will create the Wasm executable of the simple "),a("code",[e._v("adder")]),e._v(" parachain contained in this folder. This parachain will simply add messages that are sent to it. The Wasm executable will output into the "),a("code",[e._v("parachains/test/res/adder.wasm")]),e._v(" path so make sure you are able to find it there.")]),e._v(" "),a("p",[e._v("You will need to build and run the collator node in order to get the genesis state of this parachain.")]),e._v(" "),a("p",[e._v("Navigate to the "),a("code",[e._v("test-parachains/adder/collator")]),e._v(" directory and run the "),a("code",[e._v("build")]),e._v(" and "),a("code",[e._v("run")]),e._v(" commands.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cargo build\ncargo run\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ctrl-c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[e._v("Feel free to stop the collator node right away. You will get some output that looks like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Starting adder collator with genesis:\nDec: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 27, 77, 3, 221, 140, 1, 241, 4, 145, 67,\n207, 156, 76, 129, 126, 75, 22, 127, 29, 27, 131, 229, 198, 240, 241, 13, 137, 186, 30, 123, 206]\nHex: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce\n")])])]),a("p",[e._v("The important information is the hex string. This is your genesis state and you will need to save it for the next steps.")]),e._v(" "),a("h3",{attrs:{id:"deploying-the-parachain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploying-the-parachain"}},[e._v("#")]),e._v(" Deploying the parachain")]),e._v(" "),a("p",[e._v("Go to "),a("a",{attrs:{href:"https://polkadot.js.org/apps/#/extrinsics",target:"_blank",rel:"noopener noreferrer"}},[e._v("Polkadot UI"),a("OutboundLink")],1),e._v(" on the "),a("code",[e._v("Extrinsics")]),e._v(" tab. Select the account you wish to deploy the parachain from. You will need to create a referendum to deploy the parachain.")]),e._v(" "),a("p",[e._v("Click on "),a("code",[e._v("democracy")]),e._v(" -> "),a("code",[e._v("propose(proposal,value)")]),e._v(" -> "),a("code",[e._v("parachains")]),e._v(" -> "),a("code",[e._v("registerParachain(id,code,initial_head_data)")]),e._v(".")]),e._v(" "),a("p",[e._v("In the "),a("code",[e._v("id")]),e._v(" input enter in the id of the parachain. In the case of the simple adder it will be "),a("code",[e._v("100")]),e._v(". In the "),a("code",[e._v("code")]),e._v(" field click on the page button and then upload the "),a("code",[e._v("adder.wasm")]),e._v(" binary that was compiled from before. In the "),a("code",[e._v("initial_head_data")]),e._v(" we will copy and paste the hex data that we got from running the collator node. In the "),a("code",[e._v("value")]),e._v(" field you will need to input the minimum required value for creating a referendum. At the time of writing this is "),a("em",[e._v("5 DOTs")]),e._v(" on the Alexander testnet.")]),e._v(" "),a("p",[a("img",{attrs:{src:"assets/parachain/register.png",alt:"registering a parachain"}})]),e._v(" "),a("p",[e._v("If you navigate to the "),a("code",[e._v("Democracy")]),e._v(" tab you will be able to see your proposal in the proposals section.")]),e._v(" "),a("p",[e._v("Once you wait for the proposal to become a referendum you will be able to vote "),a("code",[e._v("Nay")]),e._v(" or "),a("code",[e._v("Aye")]),e._v(" on it. Assumably, you will vote Aye as this will be a vote for the deployment of your parachain.")]),e._v(" "),a("p",[a("img",{attrs:{src:"assets/parachain/referendum.png",alt:"parachain referendum"}})]),e._v(" "),a("p",[e._v("After the voting period of your referendum goes through you will be able to query the state of your parachain.")]),e._v(" "),a("p",[e._v("You can go to the "),a("code",[e._v("Chain State")]),e._v(" tab and by querying the "),a("code",[e._v("parachains")]),e._v(" state you should be able to see some information on your parachain.")]),e._v(" "),a("p",[a("img",{attrs:{src:"assets/parachain/info.png",alt:"parachain info"}})]),e._v(" "),a("h3",{attrs:{id:"interacting-with-the-parachain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interacting-with-the-parachain"}},[e._v("#")]),e._v(" Interacting with the parachain")]),e._v(" "),a("p",[a("em",[e._v("Coming soon")])])])}),[],!1,null,null,null);t.default=s.exports}}]);