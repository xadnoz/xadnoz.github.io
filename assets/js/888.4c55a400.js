(window.webpackJsonp=window.webpackJsonp||[]).push([[888],{1313:function(e,a,s){"use strict";s.r(a);var t=s(42),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Subkey is a commandline utility included with Substrate that generates or restores Substrate keys.")]),e._v(" "),s("p",[s("code",[e._v("subkey")]),e._v(" will use "),s("a",{attrs:{href:"http://wiki.polkadot.network/en/latest/polkadot/learn/cryptography/#keypairs-and-signing",target:"_blank",rel:"noopener noreferrer"}},[e._v("sr25519"),s("OutboundLink")],1),e._v(" cryptography by default. If you need to use the older ed25519 cryptography to generate or restore your key, or to generate a session key for use by validators, pass the "),s("code",[e._v("--ed25519")]),e._v(" flag to any of the commands.")]),e._v(" "),s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),s("h3",{attrs:{id:"generate-a-random-account"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate-a-random-account"}},[e._v("#")]),e._v(" Generate a random account")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("subkey generate\n")])])]),s("p",[e._v("Will output a mnemonic phrase and give you the seed, public key, and address of a new account. DO NOT SHARE your mnemonic or seed with ANYONE it will give them access to your funds. If someone is making a transfer to you they will only need your "),s("strong",[e._v("Address")]),e._v(".")]),e._v(" "),s("p",[e._v("Note that the mnemonic phrase will allow you to generate the raw seed. Use of the mnemonic phrase is recommended, as the raw seed is deprecated for use by end users. The mnemonic phrase also gives you benefit of a checksum and reduced likelihood of typos.")]),e._v(" "),s("h3",{attrs:{id:"inspecting-a-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inspecting-a-key"}},[e._v("#")]),e._v(" Inspecting a key")]),e._v(" "),s("p",[e._v("You can inspect a given URI (mnemonic, seed, public key, or address) and recover the public key and the address.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("subkey inspect "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("mnemonic,seed,pubkey,address"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\nOUTPUT:\n  Public key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(": 0x461edcf1ba99e43f50dec4bdeb3d1a2cf521ad7c3cd0eeee5cd3314e50fd424c\n  Address "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("SS58"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(": 5DeeNqcAcaHDSed2HYnqMDK7JHcvxZ5QUE9EKmjc5snvU6wF\n")])])]),s("h3",{attrs:{id:"signing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signing"}},[e._v("#")]),e._v(" Signing")]),e._v(" "),s("p",[s("code",[e._v("subkey")]),e._v(" expects a message to come in on STDIN, one way to sign a message would look like this:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("msg"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" subkey sign "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("seed,mnemonic"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\nOUTPUT:\na69da4a6ccbf81dbbbfad235fa12cf8528c18012b991ae89214de8d20d29c1280576ced6eb38b7406d1b7e03231df6dd4a5257546ddad13259356e1c3adfb509\n")])])]),s("h3",{attrs:{id:"verifying-a-signature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verifying-a-signature"}},[e._v("#")]),e._v(" Verifying a signature")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("msg"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" subkey verify "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("sig"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("address"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\nOUTPUT:\nSignature verifies correctly.\n")])])]),s("h3",{attrs:{id:"using-the-vanity-generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-the-vanity-generator"}},[e._v("#")]),e._v(" Using the vanity generator")]),e._v(" "),s("p",[e._v("You can use the included vanity generator to find a seed that provides an address which includes the desired pattern. Be warned, depending on your hardware this may take a while.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("subkey vanity "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1337")]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);