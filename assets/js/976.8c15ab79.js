(window.webpackJsonp=window.webpackJsonp||[]).push([[976],{601:function(e,t,a){"use strict";a.r(t);var _=a(42),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("+--------------------+\n|                    |\n| Substrate/Polkadot |\n|                    |\n+---------+----------+\n          |\n          |\n +--------+---------+\n |                  |\n | Client interface |\n |                  |\n | +--------------+ |\n | | Client DB    | |\n | +--------------+ |\n |                  |\n +--------+---------+\n          |\n          |\n +--------+---------+\n |                  |\n |  Wallet backend  |\n |                  |\n +------------------+\n")])])]),a("h2",{attrs:{id:"_1-追踪链头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-追踪链头"}},[e._v("#")]),e._v(" 1. 追踪链头")]),e._v(" "),a("p",[e._v("通过监察 "),a("code",[e._v("chain_subscribeFinalizedHeads")]),e._v(" RPC (或轮询 "),a("code",[e._v("chain_getFinalizedHead")]),e._v(" RPC 跟踪每个确认了的区块。")]),e._v(" "),a("p",[e._v("这将会提供一列最新确认了的区块头。")]),e._v(" "),a("p",[e._v("当新哈希到达，你可以使用 "),a("code",[e._v("chain_getBlock")]),e._v(" 把该哈希变成区块。")]),e._v(" "),a("p",[e._v("如果新区块不是您处理的最后区块的直接子代，确保迭代它们之间的所有区块。因为 "),a("code",[e._v("chain_getBlock")]),e._v(" 只接受哈希，所以你需要使用 "),a("code",[e._v("chain_getBlockHash")]),e._v(" 把那些数字转换成哈希并以这种方式在任意两个最终区块之间迭代。")]),e._v(" "),a("h2",{attrs:{id:"_2-解码区块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解码区块"}},[e._v("#")]),e._v(" 2. 解码区块")]),e._v(" "),a("p",[e._v("您需要将基本数据的区块解码为有用的字段。")]),e._v(" "),a("p",[e._v("所有区块数据是使用基本 SCALE 编码数据，详细资料"),a("a",{attrs:{href:"https://substrate.dev/docs/en/overview/low-level-data-format",target:"_blank",rel:"noopener noreferrer"}},[e._v("在此"),a("OutboundLink")],1),e._v("。但是 SCALE 仅提供底层格式，它的字段和内部结构的详细信息可能会在不同链甚至在同一链不同区块之间改变。")]),e._v(" "),a("p",[e._v("对于 Polkadot 一开始，区块头格式为五字段结构：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("struct Block:\n    parent_hash: Hash\n    number: Compact Number\n    state_root: Hash\n    extrinsics_root: Hash\n    digest: Vec<DigestItem>\n    extrinsics: Vec<Extrinsic>\n")])])]),a("p",[e._v("这依赖于 "),a("code",[e._v("Hash")]),e._v("，固定长度的32字节值或在 SCALE "),a("code",[e._v("[u8; 32]")]),e._v("。它还依赖"),a("code",[e._v("DigestItem")]),e._v(" (枚举类型):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum DigestItem:\n    ChangesTrieRoot: Hash\n    PreRuntime: ConsensusItem\n    Consensus: ConsensusItem\n    Seal: ConsensusItem\n    Other: Vec<u8>\nstruct ConsensusItem:\n    id: [u8; 4]\n    data: Vec<u8>\n")])])]),a("p",[e._v("它还依赖于 "),a("code",[e._v("外部交易(Extrinsic)")]),e._v("。"),a("em",[e._v("外部交易")]),e._v("是概括了一般和其他(未签名)外部信息的交易。它是种高度可扩展的类型，本身没有固定格式。为了确保将来格式的兼容性，可以通过 RPC "),a("code",[e._v("state_getMetadata")]),e._v(" 提供外部有关格式的元数据。")]),e._v(" "),a("p",[e._v("元数据本身以 SCALE 编码提供，其格式为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("struct Metadata:\n    magic: u32\n    version: u8\n    modules: Vec<Module>\nstruct Module:\n    name: String\n    prefix: String\n    storage: Option Vec<Storage>\n    calls: Option Vec<Call>\n    events: Option Vec<Event>\n    constants: Vec<Constant>\nenum StorageHasher:\n    Blake2_128\n    Blake2_256\n    Twox128\n    Twox256\n    Twox64Concat\nstruct Constant:\n    name: String\n    type: Type\n    value: Vec<u8>\n    documentation: Vec<String>\nstruct Storage:\n    name: String\n    modifier: StorageModifier\n    type: StorageType\n    default: Vec<u8>\n    documentation: Vec<String>\nenum StorageModifier:\n    Optional\n    Default\nenum StorageType:\n    Plain: Type\n    Map: StorageMapType\n    DoubleMap: StorageDoubleMapType\nstruct StorageMapType:\n    hasher: StorageHasher\n    key: Type\n    value: Type\n    iterable: bool\nstruct StorageDoubleMapType:\n    hasher: StorageHasher\n    first_key: Type\n    second_key: Type\n    value: Type\n    iterable: bool\nstruct Call:\n    name: String\n    arguments: Vec<CallArg>\n    documentation: Vec<String>\nstruct CallArg:\n    name: String\n    type: Type\nstruct Event:\n    name: String\n    arguments: Vec<Type>\n    documentation: Vec<String>\n")])])]),a("p",[a("code",[e._v("Type")]),e._v("只是"),a("code",[e._v("String")]),e._v("，但是字符串的内容将被解释为类型的名称。")]),e._v(" "),a("p",[e._v("Substrate 链(实际上 Substrte 链是使用 SRML 构建) 例如 Polkadot 是由不同"),a("em",[e._v("模块")]),e._v("组成。每个模块可以想象有点像智能合，有各种交易(或 Substrate 术语，"),a("em",[e._v("外部交易")]),e._v(")，数据会持续在交易和区块, 事件和常量参数之间。元数据对所有东西进行编码，允许客户端代码创建特定的交易或解释链上发生了什么，甚至在不同的 Substrate 链之间或同一链不同升级或分叉之间。")]),e._v(" "),a("p",[e._v("There are two modules a wallet needs to be aware of: Balances and Indices. Balances allows you to send and receive funds between different accounts. Indices allows you to interpret user addresses.")]),e._v(" "),a("h2",{attrs:{id:"_3-处理ss58和帐户地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-处理ss58和帐户地址"}},[e._v("#")]),e._v(" 3. 处理SS58和帐户地址")]),e._v(" "),a("p",[e._v("在 Polkadot (和大多数 Substrate 链)中，用户帐户由32字节(256位)的 AccountId 识别。这只是Substrate 使用的 x25519 加密的公钥。")]),e._v(" "),a("p",[e._v("但是为了使地址细小，我们为Polkadot上余额大于零的帐户编制索引，并仅使用此"),a("em",[e._v("索引")]),e._v("来标识该帐户。该索引比32字节长的 "),a("em",[e._v("AccountId")]),e._v(" 细小多个，通常仅用几个字节进行编码 。")]),e._v(" "),a("p",[e._v("Where Bitcoin has the Check58 address format and Ethereum used the "),a("code",[e._v("0x...")]),e._v(' hex format, Polkadot (and Substrate) use the SS58 address format. This is a broad "meta-format" designed to handle many different cryptographies and chains. It has much in common with Bitcoin\'s Check58 format such as a version prefix, a hash-based checksum suffix and base-58 encoding. Further information on it can be found here [TODO]. Of the many supported "version codes", only one particular family of subformats is especially important for Polkadot support in wallets.')]),e._v(" "),a("p",[e._v("SS58 格式是版本前缀(对于Polkadot 为一个字节，并总是为"),a("code",[e._v("0x00")]),e._v("，而 Kusama 为"),a("code",[e._v("0x02")]),e._v(")的base-58编码(使用与比特币相同的字母)，后跟一个或多个有效载荷字节，并以一个或多个校验字节结尾:")]),e._v(" "),a("p",[a("code",[e._v("0x00 <payload bytes> <checksum bytes>")])]),e._v(" "),a("p",[e._v("**地址的长度没有固定长度。**根据长度，有效负载可能具有不同的含义，并且有效负载与校验和字节的比率可能不同。下面是一个表，用于参考如何解释特定大小的地址:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Total bytes")]),e._v(" "),a("th",[e._v("Version bytes")]),e._v(" "),a("th",[e._v("Payload bytes")]),e._v(" "),a("th",[e._v("Checksum bytes")]),e._v(" "),a("th",[e._v("Payload type")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("3")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("Index")])]),e._v(" "),a("tr",[a("td",[e._v("4")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("2")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("Index")])]),e._v(" "),a("tr",[a("td",[e._v("6")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("4")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("Index")])]),e._v(" "),a("tr",[a("td",[e._v("35")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("32")]),e._v(" "),a("td",[e._v("2")]),e._v(" "),a("td",[e._v("AccountId")])])])]),e._v(" "),a("p",[e._v("注意: 此表仅包含最常见的组合。SS58 包括几个更不常见的。为了达到最大的兼容性，然后根据完整的 SS58 规范实现。")]),e._v(" "),a("p",[e._v("一旦解码为字段，则应检查版本为"),a("code",[e._v("0x00")]),e._v("。然后应验证 checksum 是否等于 SS58 数据的Blake2-256 哈希的开头，不包括 checksum 本身。如果 checksum 是一个字节，则检查哈希的第一个字节。如果是两个字节，则检查哈希的前两个字节。")]),e._v(" "),a("p",[e._v("最后在使用索引地址的情况下，索引应解码为 32 字节的帐户标识符。这可以通过检查 Indices 模块的存储来实现。")]),e._v(" "),a("h3",{attrs:{id:"查找索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找索引"}},[e._v("#")]),e._v(" 查找索引")]),e._v(" "),a("p",[e._v("查找索引有点麻烦，因为涉及查找存储，解码和解释。")]),e._v(" "),a("p",[e._v("我们关心的特定存储是"),a("code",[e._v("Indices")]),e._v("模块中的"),a("code",[e._v("EnumSet")]),e._v("。通过"),a("code",[e._v("state_getStorage")]),e._v(' RPC 检查存储，必须向其提供密钥。该键对整个"查询"进行编码。通常应咨询元数据如何生成密钥。为此我们首先找到名称为'),a("code",[e._v("Indices")]),e._v("的"),a("code",[e._v("模块")]),e._v("，然后在"),a("code",[e._v("Storage 模块中")]),e._v(" "),a("code",[e._v("storage")]),e._v("字段中找到，名称为"),a("code",[e._v("EnumSet")]),e._v("。此项包含我们构造和解释查询所需的所有信息。")]),e._v(" "),a("p",[e._v("对于 Polkadot 我们发现该项目的"),a("code",[e._v("type")]),e._v("为"),a("code",[e._v("Map")]),e._v("，其关联值为"),a("code",[e._v("StorageMapType")]),e._v("，其"),a("code",[e._v("hasher")]),e._v("为 "),a("code",[e._v("Blake2_256")]),e._v("，其"),a("code",[e._v("key")]),e._v("是"),a("code",[e._v("T:: AccountIndex")]),e._v("(对于 Polkadot 来说是"),a("code",[e._v("u32")]),e._v(")，并且其"),a("code",[e._v("value")]),e._v("为"),a("code",[e._v("Vec<T::AccountId>")]),e._v("。")]),e._v(" "),a("p",[e._v("这意味着如果我们的索引由 SCALE 编码为"),a("code",[e._v("u32")]),e._v("为"),a("code",[e._v("<INDEX>")]),e._v("，那么我们的存储键是通过字符串"),a("code",[e._v("Indices EnumSet <INDEX>")]),e._v("的 Blake2 256 哈希确定。 实际上帐户是按64个批次存储的，因此要查找特定的索引，我们不按帐户索引查询，而是按其批次的索引查询，这只是意味着我们首先需要在编码之前将索引除以64。")]),e._v(" "),a("p",[e._v("这会返回 SCALE-encoded "),a("code",[e._v("Vec<T::AccountId>")]),e._v(" ("),a("code",[e._v("T::AccountId")]),e._v(" 可能在 SCALE 定义为 "),a("code",[e._v("[u8; 32]")]),e._v("  或固定32字节数量) 包含我们感兴趣帐户的批次。要获取"),a("code",[e._v("AccountId")]),e._v("项，只需从向量中获取第"),a("code",[e._v("index％64")]),e._v("项。如果该项目不存在（或您得到一个空的存储)，则帐户索引无效。")]),e._v(" "),a("p",[e._v("否则您将拥有您的帐户 ID，并且可以将其及其标识和显示余额给用户。")]),e._v(" "),a("h2",{attrs:{id:"_4-处理余额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-处理余额"}},[e._v("#")]),e._v(" 4. 处理余额")]),e._v(" "),a("p",[e._v("在 Polkadot 中，帳戶结余可以在"),a("code",[e._v("Balances")]),e._v("模块内使用元数据的方式查找帐户索引查询被锁上的结余。在这种情况下我们需要查询存储中的"),a("code",[e._v("FreeBalance")]),e._v("。这里"),a("code",[e._v("StorageMapType")]),e._v("很相似，不同之处在于"),a("code",[e._v("key")]),e._v("的类型为"),a("code",[e._v("T::AccountId")]),e._v("(32字节)和"),a("code",[e._v("value")]),e._v("是"),a("code",[e._v("BalanceOf<T>")]),e._v("，就 Polkadot 而言，它是"),a("code",[e._v("u128")]),e._v("(128位值)。哈希函数与 Blake2 256 相同，因此完整的存储密钥将由字符串"),a("code",[e._v("Balances FreeBalance<ID>")]),e._v("的 Blake2 256 哈希给出，其中"),a("code",[e._v("<ID>")]),e._v("是32字节的"),a("code",[e._v("AccountId")]),e._v("。")]),e._v(" "),a("p",[e._v("注意: "),a("code",[e._v("FreeBalance")]),e._v("是该帐户控制的总余额，但没有考虑暂时锁定的部分，例如抵押中，投票或归属而锁定的部分。这些信息可以从链中查询，但不在本文档的范围之内。")]),e._v(" "),a("p",[e._v("DOT 代币结余将编码为12个数位。要获得 DOT 的实际数量，您需要将128位余额除以1,000,000,000,000(10 ** 12)。 为了完整起见，Polkadot 的货币面额为:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("余额值")]),e._v(" "),a("th",[e._v("名称")])])]),e._v(" "),a("tbody",[a("tr",[a("td"),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("1")]),e._v(" "),a("td",[e._v("Planck 10")])])])]),e._v(" "),a("p",[a("strong",[e._v("3 | Point 10")]),e._v("6 | Microdot (UDOT) 10"),a("strong",[e._v("9 | Millidot (MDOT) 10")]),e._v("12 | Dot (DOT) 10**15 | Blob")]),e._v(" "),a("h3",{attrs:{id:"转移余额"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转移余额"}},[e._v("#")]),e._v(" 转移余额")]),e._v(" "),a("p",[e._v("要转移余额，必须准备和发送交易。在准备交易时，有两个关键部分: 一般交易部分和模块特定的交易"),a("code",[e._v("功能")]),e._v("部分通常需要来自链元数据的信息。")]),e._v(" "),a("p",[e._v("通常 Polkadot 的交易在 SCALE 中编码为 "),a("em",[e._v("signed")]),a("code",[e._v("Extrinsics")]),e._v("。为了便于之后兼容，外在进行双编码，因此初始编码将传回 SCALE（作为"),a("code",[e._v("Vec<u8>")]),e._v("）并输出使用的。这样做的效果是向它添加一个小长度前缀，使无法解释事务数据本身的系统仍然能够将它们传递为不透明的数据包。")]),e._v(" "),a("p",[e._v("The SCALE format is given by "),a("code",[e._v("Extrinsic")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("struct Extrinsic:\n    tx: Option TransactionInfo\n    function: Function\nstruct TransactionInfo:\n    sender: Address\n    sig: [u8; 64]\n    era: Era\n    nonce: Compact Nonce\n    tip: Compact Balance\nstruct TransactionPayload:\n    function: Function\n    era: Era\n    nonce: Nonce\n    tip: Balance\n    checkpoint_hash: Hash\n")])])]),a("p",[e._v("对于交易，使用可选的"),a("code",[e._v("tx")]),e._v("。"),a("code",[e._v("Address")]),e._v("类型是经过特殊编码的 SCALE 类型，允许将帐户显示为帐户索引或32字节帐户 ID，以较方便的方式显示。格式在 SCALE [TODO] 中进行了说明。假设您希望提供一个32字节的帐户 ID，则只需在"),a("code",[e._v("0xff")]),e._v("字节前面添加前缀，就可以将其表示为"),a("code",[e._v("Address")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("sig")]),e._v("字段必须包含 SCALE 编码的"),a("code",[e._v("SigPayload")]),e._v("的25519系列签名。 用于对负载进行签名的密钥必须与"),a("code",[e._v("sender")]),e._v('帐户相对应。 建议使用 Schnorr / Ristretto 25519("sr25519")签名格式。')]),e._v(" "),a("p",[e._v('Era is a one or two byte item, again with a special SCALE encoding format and it encodes the period (as a range of blocks) for which this transaction should be considered valid. It is an important safeguard against certain transaction replay attacks and should generally be used, however a simple wallet implementation that has no plans to reuse accounts after they become empty could ignore it. To ignore it and make the transaction "immortal", use an encoded '),a("code",[e._v("Era")]),e._v(" of just one byte: "),a("code",[e._v("0x00")]),e._v(". However, if an account is removed from storage and a user re-funds an address, then previous immortal transactions could be replayed. Therefore, you may want to prevent account reaping and use mortal transactions to be safe.")]),e._v(" "),a("p",[e._v("随机数到目前为止，由发送人帐户发送的交易数量，就像在以太坊中一样。 它是"),a("code",[e._v("Nonce")]),e._v("类型，在逻辑上等效于"),a("code",[e._v("u64")]),e._v("。 为了获得正确的值，必须查询适当的存储，就像查询帐户余额时一样。 在这种情况下，它是"),a("code",[e._v("System")]),e._v("模块的"),a("code",[e._v("AccountNonce")]),e._v("。 因此所需的存储密钥是字符串"),a("code",[e._v("System AccountNonce<ID>")]),e._v("的 Blake2 256 哈希，其中"),a("code",[e._v("<ID>")]),e._v("是32字节的"),a("code",[e._v("AccountId")]),e._v("。 它将返回一个"),a("code",[e._v("Nonce")]),e._v("，可以在此处对其进行解码和使用。")]),e._v(" "),a("p",[e._v("注意: 从存储中检索的 nonce 没考虑"),a("em",[e._v("待处理")]),e._v("交易。如果您从一个帐户发送多个交易，则需要手动递增和跟踪此值。")]),e._v(" "),a("p",[a("code",[e._v("tip")]),e._v("是"),a("code",[e._v("Balance")]),e._v("(在逻辑上等同于 SCALE 中的"),a("code",[e._v("u128")]),e._v("类型)，它表示在繁忙的时候，为优先包含创建区块者支付一些额外费用。通常为零。")]),e._v(" "),a("p",[a("code",[e._v("checkpoint_hash")]),e._v('是 "区块检查点"的哈希，也就是说'),a("code",[e._v("era")]),e._v('字段指定的纪元的第一个区块。 如果只是使交易"immortal"，则应使用区块链的创始哈希。 这可以通过RPC '),a("code",[e._v("chain_getBlockHash(0)")]),e._v("确定。")]),e._v(" "),a("p",[e._v("最后 "),a("code",[e._v("function")]),e._v("是"),a("code",[e._v("Function")]),e._v("类型(在某些情况下有时称为"),a("code",[e._v("Call")]),e._v("或"),a("code",[e._v("Proposal")]),e._v(")，它描述了应该采取什么行动。它必须根据元数据构造。 在这种情况下，我们希望交易在"),a("code",[e._v("Balances")]),e._v("模块中实现"),a("code",[e._v("transfer")]),e._v("功能，以将余额从一个帐户转移到另一个帐户。 在模块列表中检查余额模块本身的索引很重要。 在这种情况下，它是第六项或索引5。还需要检查元数据中余额"),a("code",[e._v("Module")]),e._v("的"),a("code",[e._v("calls")]),e._v("字段，并确定其中的索引转移功能。它在列表中排在第一位，因此索引为0。")]),e._v(" "),a("p",[e._v("最后我们需要知道该函数需要哪些参数才能创建其余的交易。这在我们刚刚找到的元数据的"),a("code",[e._v("Call")]),e._v("项中提供。预期有两个参数：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("dest")]),e._v(" with a type of "),a("code",[e._v("<T::Lookup as StaticLookup>::Source")]),e._v(" (aka "),a("code",[e._v("Address")]),e._v("); and")]),e._v(" "),a("li",[a("code",[e._v("value")]),e._v(" with a type of "),a("code",[e._v("Compact<T::Balance>")]),e._v(" (aka "),a("code",[e._v("Compact Balance")]),e._v(").")])]),e._v(" "),a("p",[e._v("在这种情况下 "),a("code",[e._v("函数")]),e._v(" * * (即专门针对并且仅适用于Polkadot 上的余额转帐交易) 将是以下结构：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("struct BalanceTransferFunction:\n    module_index: u8\n    call_index: u8\n    dest: Address\n    value: Compact Balance\n")])])]),a("p",[e._v("其中"),a("code",[e._v("module_index")]),e._v("是"),a("code",[e._v("0x05")]),e._v("，而"),a("code",[e._v("call_index")]),e._v("是"),a("code",[e._v("0x00")]),e._v("。"),a("code",[e._v("dest")]),e._v("与"),a("code",[e._v("sender")]),e._v("类似，可以作为帐户索引或32字节帐户ID提供，以较方便为准。如果提供帐户ID，则只需在其前面加上字节"),a("code",[e._v("0xff")]),e._v("即可将其成为地址。")]),e._v(" "),a("p",[e._v("转帐的金额(不包括付给系统的任何费用)由"),a("code",[e._v("value")]),e._v("给出，并且必须是 SCALE compact 编码的数字。")]),e._v(" "),a("h3",{attrs:{id:"提交和检查交易"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交和检查交易"}},[e._v("#")]),e._v(" 提交和检查交易")]),e._v(" "),a("p",[e._v("一旦交易准备好，您将需要将其提交以包含在链中，并最终想要验证它是否真的包含在链中。")]),e._v(" "),a("p",[e._v("可以通过两种方式完成: 一种是使用简单 RPC "),a("code",[e._v("author_submitExtrinsic")]),e._v("，它将回传交易的哈希值。 提交后您可以继续手动检查交易是否在已确认的区块内(因为您都已经跟踪已确认的区块头)，直到看到您提交的交易为止，此时您知道交易已在链中。")]),e._v(" "),a("p",[e._v("另一种方法是使用 pub/sub RPC "),a("code",[e._v("author_submitAndWatchExtrinsic")]),e._v("。您同样提供 SCALE 编码的交易，但是在这里您会收到 subscription ID。 当交易被验证，广播并通过单独推送的消息包含在链中时，将通过 RPC 通知您。")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("文章到此结束。在这里，您应该知道如何与 Substrate/Polkadot 节点进行交互，以便跟踪最终确定的链头、解码 SS58 地址、检查账户信息(如 balances & nonces) 以及构建、提交和跟踪交易。您还了解了 SCALE 编码器、Substrate 元数据系统以及如何构建面向未来的通用 Substrate 系统。")]),e._v(" "),a("p",[e._v("如果你有任何问题，请在 "),a("a",{attrs:{href:"https://riot.im/app/#/room/#substrate-technical:matrix.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Substrate Technical"),a("OutboundLink")],1),e._v(" 问。")]),e._v(" "),a("p",[a("em",[e._v("最初版本发布在"),a("a",{attrs:{href:"https://hackmd.io/@gavwood/r1jTRX2Zr",target:"_blank",rel:"noopener noreferrer"}},[e._v("此处"),a("OutboundLink")],1),e._v("。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);